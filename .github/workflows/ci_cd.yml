name: 'CI/CD'
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  # 手動で実行可能
  workflow_dispatch:

# pipefail を有効化
defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    # タイムアウトを10分に設定
    timeout-minutes: 10
    services:
      db:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: juku_cloud_backend_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        # ヘルスチェックを追加
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      RAILS_ENV: test
      # データベース接続情報を環境変数で設定
      DATABASE_URL: postgres://postgres:password@localhost:5432/juku_cloud_backend_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Add or replace dependency steps here
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true
      # Add or replace database setup steps here
      - name: Set up database schema
        run: bin/rails db:schema:load
      # Add or replace test runners here
      - name: Run tests
        run: bin/rake

  lint:
    runs-on: ubuntu-latest
    # タイムアウトを10分に設定
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true
      - name: Generate binstubs
        run: bundle binstubs bundler-audit brakeman rubocop
      # Add or replace any other lints here
      - name: Security audit dependencies
        run: bin/bundler-audit --update
      - name: Security audit application code
        run: bin/brakeman -q -w2
      - name: Lint Ruby files
        run: bin/rubocop --parallel
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, lint]
    permissions:
      contents: read
      id-token: write  # ← OIDC AssumeRole に必須
    env:
      REGION: ap-northeast-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      AWS_ROLE_ARN_BACK: ${{ secrets.AWS_ROLE_ARN_BACK }}
      SUBNET_ID: ${{ secrets.SUBNET_ID }}
      SG_ID: ${{ secrets.SG_ID }}
      IMAGE_TAG: ${{ github.sha }}       # 不変タグ
      CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
      TASK_ROLE_NAME: ${{ vars.TASK_ROLE_NAME }}
      EXEC_ROLE_NAME: ${{ vars.EXEC_ROLE_NAME }}
      TASK_FAMILY: ${{ vars.TASK_FAMILY }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN_BACK }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image to ECR
        id: build # idを指定してoutputsで参照できるようにする
        run: |
          set -u
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          docker build -t "${IMAGE_URI}" .
          docker push "${IMAGE_URI}"

          echo "image=${IMAGE_URI}" >> "$GITHUB_OUTPUT"
          

      # タスク定義のロールARNを動的に差し替え
      - name: Patch role ARNs in taskdef
        run: |
          TASK_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${TASK_ROLE_NAME}"
          EXEC_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${EXEC_ROLE_NAME}"
          jq --arg task "$TASK_ARN" --arg exec "$EXEC_ARN" \
            '.taskRoleArn=$task | .executionRoleArn=$exec' \
            ecs/taskdef.json > ecs/taskdef.patched.json
      
      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/taskdef.patched.json # Patchで新しくなったタスク定義を指定
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build.outputs.image }}  # Buildで新しくなったイメージURIを指定
          environment-variables: |
            RAILS_LOG_TO_STDOUT=${{vars.RAILS_LOG_TO_STDOUT}}
            RAILS_ENV=${{vars.RAILS_ENV}}
            RAILS_SERVE_STATIC_FILES=${{vars.RAILS_SERVE_STATIC_FILES}}
            DB_NAME=${{vars.DB_NAME}}
            DB_HOST=${{vars.DB_HOST}}
          secrets: |
            DB_PASSWORD=${{secrets.DB_PASSWORD}}
            DB_USERNAME=${{secrets.DB_USERNAME}}
            RAILS_MASTER_KEY=${{secrets.RAILS_MASTER_KEY}}
            SECRET_KEY_BASE=${{secrets.SECRET_KEY_BASE}}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }} 
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
        
      - name: Run DB migrate (one-off task, wait & show logs)
        env:
          FAMILY: ${{ env.TASK_FAMILY }}
          CLUSTER: ${{ env.ECS_CLUSTER }}
          SUBNET_ID: ${{ env.SUBNET_ID }}
          SG_ID: ${{ env.SG_ID }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          REGION: ${{ env.REGION }}
        run: |
          set -u

          # 最新のTD ARNとログ設定を取得
          TD_ARN=$(aws ecs describe-task-definition --task-definition "$FAMILY" \
                    --query 'taskDefinition.taskDefinitionArn' --output text)
          TD_JSON=$(aws ecs describe-task-definition --task-definition "$FAMILY")

          LOG_GROUP=$(echo "$TD_JSON" | jq -r '.taskDefinition.containerDefinitions[0].logConfiguration.options."awslogs-group" // empty')
          LOG_PREFIX=$(echo "$TD_JSON" | jq -r '.taskDefinition.containerDefinitions[0].logConfiguration.options."awslogs-stream-prefix" // empty')
          LOG_REGION=$(echo "$TD_JSON" | jq -r '.taskDefinition.containerDefinitions[0].logConfiguration.options."awslogs-region" // env.REGION')

          echo "TaskDefinition: $TD_ARN"
          echo "awslogs-group: $LOG_GROUP"
          echo "awslogs-prefix: $LOG_PREFIX"
          echo "awslogs-region: $LOG_REGION"

          
          PUBLIC_IP=ENABLED

          # タスク起動
          RUN_JSON=$(aws ecs run-task \
            --cluster "$CLUSTER" \
            --launch-type FARGATE \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=$PUBLIC_IP}" \
            --task-definition "$TD_ARN" \
            --overrides '{
              "containerOverrides": [{
                "name": "'"${CONTAINER_NAME}"'",
                "command": ["bash","-lc","bundle exec rails db:migrate"]
              }]
            }' \
            --started-by "ci-migrate")

          TASK_ARN=$(echo "$RUN_JSON" | jq -r '.tasks[0].taskArn')
          if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" = "null" ]; then
            echo "Failed to start migrate task:"
            echo "$RUN_JSON"
            exit 1
          fi
          echo "Started task: $TASK_ARN"

          # 停止まで待機
          aws ecs wait tasks-stopped --cluster "$CLUSTER" --tasks "$TASK_ARN"

          # 結果取得
          DESC_JSON=$(aws ecs describe-tasks --cluster "$CLUSTER" --tasks "$TASK_ARN")
          STATUS=$(echo "$DESC_JSON" | jq -r '.tasks[0].lastStatus')
          STOPPED_REASON=$(echo "$DESC_JSON" | jq -r '.tasks[0].stoppedReason // empty')
          EXIT_CODE=$(echo "$DESC_JSON" | jq -r '.tasks[0].containers[0].exitCode // empty')
          REASON=$(echo "$DESC_JSON" | jq -r '.tasks[0].containers[0].reason // empty')
          TASK_ID=$(echo "$TASK_ARN" | awk -F/ '{print $2}')

          echo "Task status: $STATUS"
          echo "Stopped reason: $STOPPED_REASON"
          echo "Container exitCode: $EXIT_CODE"
          echo "Container reason: $REASON"

          # ログ吸い出し（awslogs 使用時）
          if [ -n "$LOG_GROUP" ] && [ -n "$LOG_PREFIX" ]; then
            STREAM_NAME="${LOG_PREFIX}/${CONTAINER_NAME}/${TASK_ID}"
            echo "---- CloudWatch Logs (${LOG_GROUP} / ${STREAM_NAME}) ----"
            aws logs get-log-events \
              --region "$LOG_REGION" \
              --log-group-name "$LOG_GROUP" \
              --log-stream-name "$STREAM_NAME" \
              --limit 10000 \
              --query 'events[].message' \
              --output text || true
            echo "---- (end logs) ----"
          else
            echo "awslogs 未設定のためログ取得をスキップしました。"
          fi

          # 失敗ならジョブを落とす
          if [ "${EXIT_CODE:-1}" != "0" ]; then
            echo "Migration failed with exitCode=${EXIT_CODE} / reason=${REASON}"
            exit 1
          fi
          echo "Migration succeeded."

